import BigNumber from 'bignumber.js';
import { BufferComposer, ComposableBuffer } from '@defichain/jellyfish-buffer';
import { Script } from '../../tx';
export interface TokenBalance {
    token: number;
    amount: BigNumber;
}
/**
 * Composable TokenBalance, C stands for Composable.
 * Immutable by design, bi-directional fromBuffer, toBuffer deep composer.
 */
export declare class CTokenBalance extends ComposableBuffer<TokenBalance> {
    composers(tb: TokenBalance): BufferComposer[];
}
export interface ScriptBalances {
    script: Script;
    balances: TokenBalance[];
}
/**
 * Composable ScriptBalances, C stands for Composable.
 * Immutable by design, bi-directional fromBuffer, toBuffer deep composer.
 */
export declare class CScriptBalances extends ComposableBuffer<ScriptBalances> {
    composers(sb: ScriptBalances): BufferComposer[];
}
/**
 * TokenBalanceVarInt
 */
export interface TokenBalanceVarInt {
    token: number;
    amount: BigNumber;
}
/**
 * Composable TokenBalanceVarInt, C stands for Composable.
 * Immutable by design, bi-directional fromBuffer, toBuffer deep composer.
 */
export declare class CTokenBalanceVarInt extends ComposableBuffer<TokenBalanceVarInt> {
    composers(tb: TokenBalanceVarInt): BufferComposer[];
}
//# sourceMappingURL=dftx_balance.d.ts.map